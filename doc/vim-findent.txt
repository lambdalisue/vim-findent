*vim-findent.txt*			Find and apply the existing indent rule

Version: 0.1.0
Author:  Alisue <lambdalisue@hashnote.net>		*vim-findent-author*
Support: Vim 7.4 and above
License: MIT license

    Copyright (c) 2015 Alisue, hashnote.net

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=============================================================================
CONTENTS					*vim-findent-contents*

Introduction			|vim-findent-introduction|
Install				|vim-findent-install|
Usage				|vim-findent-usage|
Interface			|vim-findent-interface|
  Command			|vim-findent-command|
  Variable			|vim-findent-variable|


==============================================================================
INTRODUCTION				*vim-findent-introduction*

*vim-findent* is a plugin to find and apply reasonable values of |expandtab|,
|shiftwidth|, |tabstop|, and |softtabstop| of the current buffer.

vim-findent is small and simple plugin, compares to existing similar plugins
such as vim-sleuth or detectindent. This plugin only provides two commands and
no default |FileType| |autocmd| is provided, mean that users can control the
behavior of automatic detection by defining |autocmd| by themselves.
The detection algorithm is much simpler as well compared to vim-sleuth or
detectindent. While we are living in a real world and we are editing
pre-formatted codes, I don't really think we need a super perfect but complex
algorithm. A faster and simpler algorithm would be better.


==============================================================================
INSTALL					*vim-findent-install*

Use Vundle.vim, neobundle.vim, or other vim plugin manager to install it like:
>
	" Vundle.vim
	Plugin 'lambdalisue/vim-findent'

	" neobundle.vim
	NeoBundle 'lambdalisue/vim-findent'

	" neobundle.vim (Lazy)
	NeoBundleLazy 'lambdalisue/vim-findent', {
		\ 'autoload': {
		\   'commands': [
		\     'Findent',
		\     'FindentRestore',
		\   ],
		\}}

	" neobundle.vim (Lazy: with completion)
	NeoBundleLazy 'lambdalisue/vim-findent', {
		\ 'autoload': {
		\   'commands': [
		\     {
		\       'name': 'Findent',
		\       'complete': 'customlist,findent#FindentComplete',
		\     },
		\     {
		\       'name': 'FindentRestore',
		\       'complete': 'customlist,findent#FindentRestoreComplete',
		\     },
		\   ],
		\}}
<
If you are not using any vim plugin manager, you can copy the repository to
your $VIM directory to enable the plugin.


==============================================================================
USAGE					*vim-findent-usage*

Call |:Findent| to find and apply reasonable |expandtab|, |shiftwidth|,
|tabstop|, and |softtabstop| (an indent rule) of the current buffer.
It automatically use a middle part of the content to detect the reasonable
indent rule and apply to the local setting (|setlocal|).
If you want to control the region of content used for detection, use visual
selection to select the region prior to the command.

Call |:FindentRestore| to restore a previous indent rule of the current buffer,
or call |:Findent!| to re-apply findent forcedly.

If you want to make this detection automatic, use |autocmd| like:
>
	augroup findent
	  autocmd!
	  autocmd FileType javascript Findent
	  autocmd FileType css        Findent
	augroup END
<
If you feel annoying for the detection message, use '--no-messages':
>
	augroup findent
	  autocmd!
	  autocmd FileType javascript Findent --no-messages
	  autocmd FileType css        Findent --no-messages
	augroup END
<
Or if you want to completely suppress messages, use '--no-warnings' as well:
>
	augroup findent
	  autocmd!
	  autocmd FileType javascript Findent --no-messages --no-warnings
	  autocmd FileType css        Findent --no-messages --no-warnings
	augroup END
<
In this case, |:Findent| will find and apply an indent rule of the buffer in
|BufWinEnter| |autocmd| but |FileType| |autocmd|. See |:Findent| for more detail.
In this case, |:Findent| reserve the specified options into a buffer variable
and actual |:Findent| call will be performed on |BufWinEnter| autocmd.
This is required to make sure that the |:Findent| command is called only after
|FileType| autocmd or |ftplugin| to prevent setting overwrite.
See |:Findent-autocmd| for more detail about this behavior.

==============================================================================
INTERFACE				*vim-findent-interface*

-------------------------------------------------------------------------------
COMMAND					*vim-findent-command*

							*:Findent*
:Findent[!] [-h|--help] [--[no-]messages] [--[no-]warnings]
		[--chunksize={CHUNKSIZE}] [--threshold={THRESHOLD}]

	Find and apply reasonable values of |expandtab|, |shiftwidth|, |tabstop|,
	and |softtabstop| of the current buffer.
	If a |<bang>| (!) is specified, it force to find and apply the
	reasonable indent rule. Otherwise it will fail if the indent rules
	are already applied.

	If '--no-messages' is specified, detection messages will be
	suppressed. To enforce to display the messages, use '--messages'.
	The default behavior is depended on |g:findent#enable_messages|.
	If '--no-warnings' is specified, warning messages will be
	suppressed. To enforce to display the messages, use '--warnings'.
	The default behavior is depended on |g:findent#enable_warnings|.

	The detection will be performed on {CHUNKSIZE} lines at the middle
	part of the content of the current buffer. To control the region of
	the detection, use visual selection prior to the command.
	The default value of {CHUNKSIZE} is |g:findent#chunksize|.

	The detected number of spaces in a space indent will be influenced by
	{THRESHOLD}. If {THRESHOLD} is 0, the number of appearance of each
	sample in |g:findent#samples| are counted and most frequent sample
	would be the number of spaces of a unit. However, if {THRESHOLD} is
	grater than 0, the detection procedure will be complete when the number
	of appearance of a sample reaches to the {THRESHOLD}. This {THRESHOLD}
	stands for detecting a correct indent rule from a content like below:
>
	" expandtab, shiftwidth=2, softtabstop=2
	function! FizzBuzz(n) abort
	  function! s:fizzbuzz(i) abort
	    let mod3 = i % 3 == 0 ? 'Fizz' : ''
	    let mod5 = i % 5 == 0 ? 'Buzz' : ''
	    let ret  = mod3 . mod5
	    return empty(ret) ? string(i) : ret
	  endfunction
	endfunction
<
	The content above has two lines with 2 leading spaces and four lines
	with 4 leading spaces. In this case, the detection program choose a
	dominant leading spaces (4 spaces) as the number of spaces of a unit
	if {THRESHOLD} is 0.
	The default value of {THRESHOLD} is |g:findent#threshold|.

							*:Findent-autocmd*
	If |:Findent| is called from |autocmd|, it automatically reserve the
	specified options to call |:Findent| in |BufWinEnter|. This is
	required to make sure that |:Findent| is called only after |FileType|
	|autocmd| and/or |ftplugin|. So that applied settings by |:Findent|
	will not be overwritten by filetype specific settings.
	If you want to call |:Findent| whenever the command is called even
	from |autocmd|, specify a |<bang>| (!).

	To restore the indent rule, call |:FindentRestore|.

							*:FindentRestore*
:FindentRestore [-h|--help] [--[no-]messages] [--[no-]warnings]

	Restore previous |expandtab|, |shiftwidth|, |tabstop|, and
	|softtabstop| of the current buffer saved by |:Findent|.

	If '--no-messages' is specified, detection messages will be
	suppressed. To enforce to display the messages, use '--messages'.
	The default behavior is depended on |g:findent#enable_messages|.
	If '--no-warnings' is specified, warning messages will be
	suppressed. To enforce to display the messages, use '--warnings'.
	The default behavior is depended on |g:findent#enable_warnings|.

-------------------------------------------------------------------------------
VARIABLE				*vim-findent-variable*

g:findent#enable_messages			 *g:findent#enable_messages*

	Enable detection messages of |:Findent| and |:FindentRestore|.
	If the value is 0, users need to specify '--messages' to see the
	detection messages.
	Default is 1

g:findent#enable_warnings			 *g:findent#enable_warnings*

	Enable warning messages of |:Findent| and |:FindentRestore|.
	If the value is 0, users need to specify '--warnings' to see the
	warning messages.
	Default is 1

g:findent#chunksize				*g:findent#chunksize*

	A default value (|Number|) of {CHUNKSIZE} used in |:Findent|.
	Default is 1000

g:findent#threshold				*g:findent#threshold*

	A default value (|Number|) of {THRESHOLD} used in |:Findent|.
	Default is 1

g:findent#samples				*g:findent#samples*

	A |List| of the number of spaces of the unit (investigation sample).
	Only the number of spaces in this variable are allowed to be an indent
	unit to decrease mis-detections of |shiftwidth| and/or |softtabstop|.
	Posterior samples will not be investigated if |g:findent#threshold| is
	grater than 0 and the number of appearance of the prior sample reach
	the threshold. So pay attention to the order of sample in the list.
	Default is [2, 4, 8]

vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
