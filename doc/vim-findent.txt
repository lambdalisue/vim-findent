*vim-findent.txt*			Find and apply the existing indent rule

Version: 0.1.0
Author:  Alisue <lambdalisue@hashnote.net>		*vim-findent-author*
Support: Vim 7.4 and above
License: MIT license

    Copyright (c) 2015 Alisue, hashnote.net

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=============================================================================
CONTENTS					*vim-findent-contents*

Introduction			|vim-findent-introduction|
Install				|vim-findent-install|
Usage				|vim-findent-usage|
Interface			|vim-findent-interface|
  Command			|vim-findent-command|
  Variable			|vim-findent-variable|


==============================================================================
INTRODUCTION				*vim-findent-introduction*

*vim-findent* is a plugin to find and apply reasonable values of |expandtab|,
|shiftwidth|, and |softtabstop| from the content of the current buffer.

vim-findent is small and simple plugin, compares to existing similar plugins
such as vim-sleuth or detectindent. This plugin only provide three commands and
no default |autocmd| is provided, mean that user can control the behavior of
automatic detection by defining |autocmd| by them self. The detection algorithm
is much simpler as well compared to vim-sleuth or detectindent. While we are
living a real world and we are editing pre-formatted codes, I don't really
think we need a super perfect but complex algorithm. A faster and simpler
algorithm would be better.


==============================================================================
INSTALL					*vim-findent-install*

Use Vundle.vim, neobundle.vim, or other vim plugin manager to install it like:
>
	" Vundle.vim
	Plugin 'lambdalisue/vim-findent'

	" neobundle.vim
	NeoBundle 'lambdalisue/vim-findent'

	" neobundle.vim (Lazy)
	NeoBundleLazy 'lambdalisue/vim-findent', {
		\ 'autoload': {
		\   'commands': [
		\     'Findent',
		\     'FindentActivate',
		\     'FindentDeactivate',
		\   ],
		\}}

	" neobundle.vim (Lazy: with completion)
	NeoBundleLazy 'lambdalisue/vim-findent', {
		\ 'autoload': {
		\   'commands': [{
		\     'name': [
		\       'Findent',
		\       'FindentActivate',
		\       'FindentDeactivate',
		\     ],
		\     'complete': 'customlist,findent#FindentComplete',
		\   }],
		\}}
<
If you are not using any vim plugin manager, you can copy the repository to
your $VIM directory to enable the plugin.


==============================================================================
USAGE					*vim-findent-usage*

To find and apply reasonable |expandtab|, |shiftwidth|, and |softtabstop| of
the current buffer, call |:Findent| or |:FindentActivate|.
If you want to control the region of content used for detection, select the
region via visual selection (V) and call the command above.

If you want to make this detection automatic, use |autocmd| like:
>
	augroup findent
	  autocmd!
	  autocmd BufRead *.js  FindentActivate
	  autocmd BufRead *.css FindentActivate
	augroup END
<
If you feel annoying for the detection fail message, use a bang (!) to suppress:
>
	augroup findent
	  autocmd!
	  autocmd BufRead *.js  FindentActivate!
	  autocmd BufRead *.css FindentActivate!
	augroup END
<
If you want to completely suppress the messages, specify 'quiet':
>
	augroup findent
	  autocmd!
	  autocmd BufRead *.js  FindentActivate! quiet
	  autocmd BufRead *.css FindentActivate! quiet
	augroup END
<
Note: Use |BufRead| instead of |FileType| to prevent overwriting by ftplugin.

==============================================================================
INTERFACE				*vim-findent-interface*

-------------------------------------------------------------------------------
COMMAND					*vim-findent-command*

:Findent[!] [quiet]					*:Findent*

	Activate or deactivate (toggle) findent. If a bang (!) is specified to
	the command, warning messages are suppressed and if 'quiet' is specified,
	detection messages are suppressed.
	See |:Findent-activate| and |:Findent-deactivate|.

:FindentActivate[!] [quiet]				*:Findent-activate*

	Find and apply reasonable |expandtab|, |shiftwidth|, and |softtabstop|
	of the content of the current buffer. If a bang (!) is specified to
	the command, warning messages are suppressed and if 'quiet' is specified,
	detection messages are suppressed.
	It use the content between |g:findent#startline| (default: 0) and
	|g:findent#lastline| (default: 100). To specify a particular region,
	select the region via visual selection (V) and call this command.
	The previous |expandtab|, |shiftwidth|, and |softtabstop| are saved in
	a buffer variable and can be restored by |Findent-deactivate|.

:FindentDeactivate[!] [quiet]				*:Findent-deactivate*

	Restore previous |expandtab|, |shiftwidth|, and |softtabstop| of the
	current buffer saved by |:FindentActivate|. If a bang (!) is specified
	to the command, warning messages are suppressed and if 'quiet' is
	specified, detection messages are suppressed.


-------------------------------------------------------------------------------
VARIABLE				*vim-findent-variable*

g:findent#startline					*g:findent#startline*

	A |Number|. findent try to detect the existing indent rule of the buffer
	from this line of the buffer.
	Default is 0.

g:findent#lastline					*g:findent#lastline*

	A |Number|. findent try to detect the existing indent rule of the buffer
	to this line of the buffer.
	Default is 100.

g:findent#threshold					*g:findent#threshold*

	A |Number|. If the value is grater than 0, findent complete detection of
	unit (the number of spaces) when the number of unit appearance reach
	this value. Otherwise findent compare the number of appearance of each
	units and determine the reasonable unit.
	
	For example, the unit of the following content will be 2 if the value
	of this option is 1. Otherwise the unit will be 4 because the number
	of appearance of 4 (hoge) is grather than 2 (bar).
>
	foo
	  bar
	    hoge
	    hoge
	    hoge
<       
	Default is 1.

g:findent#available_units			*g:findent#available_units*

	A |List|. The number of spaces in this list are used as unit.
	Posterior units will not be investigated if |g:findent#threshold| is
	grather than 0 and the number of appearance of the prior unit reach
	the threshold. So pay attention to the order of unit appearance in the
	list.
	Default is [2, 4, 8]

vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
