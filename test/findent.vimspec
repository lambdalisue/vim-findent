function! s:readfile(filename) abort
  let path = printf('%s/dat/%s', g:repo, a:filename)
  return readfile(path)
endfunction

Describe findent#
  Context guess({content})
    It should return an empty dictionary for an empty {content}
      let ret = findent#guess([])
      Assert Equals(ret, {})
    End

    It should return a correct value for tab indented {content}
      let content = s:readfile('tab.js')
      let ret = findent#guess(content)
      Assert Equals(ret, {
            \ 'expandtab': 0,
            \ 'shiftwidth': 0,
            \ 'softtabstop': 0,
            \})
    End

    It should return a correct value for 2 spaces indented {content}
      let content = s:readfile('2spaces.js')
      let ret = findent#guess(content)
      Assert Equals(ret, {
            \ 'expandtab': 1,
            \ 'shiftwidth': 2,
            \ 'softtabstop': 2,
            \})
    End

    It should return a correct value for 4 spaces indented {content}
      let content = s:readfile('4spaces.js')
      let ret = findent#guess(content)
      Assert Equals(ret, {
            \ 'expandtab': 1,
            \ 'shiftwidth': 4,
            \ 'softtabstop': 4,
            \})
    End

    It should return a correct value for 8 spaces indented {content}
      let content = s:readfile('8spaces.js')
      let ret = findent#guess(content)
      Assert Equals(ret, {
            \ 'expandtab': 1,
            \ 'shiftwidth': 8,
            \ 'softtabstop': 8,
            \})
    End

    It should return a correct value for Vim(C) style indented {content}
      let content = s:readfile('vimstyle.js')
      let ret = findent#guess(content)
      Assert Equals(ret, {
            \ 'expandtab': 0,
            \ 'shiftwidth': 4,
            \ 'softtabstop': 8,
            \})
    End

  End
End
